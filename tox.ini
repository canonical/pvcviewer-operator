# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[flake8]
max-line-length = 100

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = fmt, lint, unit, integration

[vars]
all_path = {[vars]src_path} {[vars]tst_path}
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/

[testenv]
passenv = 
	PYTHONPATH
	CHARM_BUILD_DIR
	MODEL_SETTINGS
	KUBECONFIG
setenv = 
	PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
	PYTHONBREAKPOINT=ipdb.set_trace
	PY_COLORS=1

[testenv:update-requirements]
skip_install = true
allowlist_externals = poetry
commands_pre =
	poetry install --only update-requirements
commands =
	# updating all groups' locked dependencies:
	poetry lock --regenerate
	# exporting locked charm dependencies into pip-compatible requirements.txt format:
	poetry self add poetry-plugin-export
	poetry export --only charm -f requirements.txt -o requirements.txt --without-hashes
description = Update requirements including those in subdirs

[testenv:fmt]
skip_install = true
allowlist_externals = poetry
commands_pre =
	poetry install --only fmt
commands = 
	poetry run isort {[vars]all_path}
	poetry run black {[vars]all_path}
description = Apply coding style standards to code

[testenv:lint]
skip_install = true
allowlist_externals = poetry
commands_pre =
	poetry install --only lint
commands = 
	# uncomment the following line if this charm owns a lib
	# codespell {[vars]lib_path}
	poetry run codespell {toxinidir}/. --skip {toxinidir}/.git \
	--skip {toxinidir}/.tox --skip {toxinidir}/build --skip {toxinidir}/lib \
	--skip {toxinidir}/venv --skip {toxinidir}/.mypy_cache \
	--skip {toxinidir}/icon.svg --skip *.json.tmpl \
	--skip {toxinidir}/.venv --skip {toxinidir}/.poetry.lock
	# pflake8 wrapper supports config from pyproject.toml
	poetry run pflake8 {[vars]all_path}
	poetry run isort --check-only --diff {[vars]all_path}
	poetry run black --check --diff {[vars]all_path}
description = Check code against coding style standards

[testenv:tflint]
allowlist_externals = 
	tflint
commands = 
	tflint --chdir=terraform --recursive
description = Check Terraform code against coding style standards

[testenv:unit]
skip_install = true
allowlist_externals = poetry
commands_pre =
	poetry install --only charm,unit
commands = 
	poetry run coverage run --source={[vars]src_path} \
	-m pytest --ignore={[vars]tst_path}integration -vv --tb native {posargs}
	poetry run coverage report
	poetry run coverage xml
description = Run unit tests

[testenv:integration]
skip_install = true
allowlist_externals = poetry
commands_pre =
	poetry install --only integration
commands =
	poetry run pytest {[vars]tst_path}integration -vv --tb native \
	--asyncio-mode=auto --log-cli-level=INFO -s {posargs}
description = Run integration tests