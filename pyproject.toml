# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[project]
name = "pvcviewer-operator"
version = "0.1.0"
description = "Charmed PVC Viewer: a Juju Operator for PCV Viewer"
readme = "README.md"
requires-python = ">=3.8"
# ----------------------------------------------------------------------------
# please, leave this list of project dependencies empty...
dependencies = []
# ... as dependency groups can instead be specified for the charm project via
# the uv plugin of Charmcraft - use the "charm" dependency group defined below
# ----------------------------------------------------------------------------

[project.optional-dependencies]
charm = [
    # Version >=0.2.0 contains the base charm code that's needed.
    "charmed-kubeflow-chisme >= 0.2.0",
    "ops",
    "serialized-data-interface",
    # from loki_k8s.v1.loki_push_api.py
    "cosl",
]
fmt = [
	"black",
    "isort",
]
lint = [
	"black",
    "codespell",
    "flake8",
    "flake8-builtins",
    "flake8-copyright",
    "isort",
    "pep8-naming",
    "pyproject-flake8",
]
unit = [
    "coverage",
    "ops",
    "pytest",
    "pytest-mock",
    "pytest-lazy-fixture",
    "pyyaml",
]
integration = [
	"aiohttp",
    # Pinning to <4.0 due to compatibility with the 3.1 controller version
    "juju<4.0",
    "lightkube",
    "pytest-operator",
    "tenacity",
    # Pin to >=0.4.0 because the reusable test infrastructure is on that version and above
    # This prevents pip-compile from trying to pin an earlier version
    "charmed-kubeflow-chisme>=0.4.0",
]

[tool.uv]
# to ensure dependencies are built from source:
no-binary = true
# mind these workarounds to their temporary issue:
# - https://github.com/canonical/charmcraft/issues/2259#issuecomment-2840047373
# - https://github.com/canonical/charmcraft/issues/2259#issuecomment-2842766428
build-constraint-dependencies = [
    "setuptools_scm < 8.3.0",
]

# Testing tools configuration
[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py38"]

[tool.isort]
line_length = 99
profile = "black"

# Linting tools configuration
[tool.flake8]
max-line-length = 99
max-doc-length = 99
max-complexity = 10
exclude = [".git", "__pycache__", ".tox", "build", "dist", "*.egg_info", "venv"]
select = ["E", "W", "F", "C", "N", "R", "D", "H"]
# Ignore W503, E501 because using black creates errors with this
# Ignore D107 Missing docstring in __init__
ignore = ["W503", "E501", "D107"]
# D100, D101, D102, D103: Ignore missing docstrings in tests
per-file-ignores = ["tests/*:D100,D101,D102,D103,D104"]
docstring-convention = "google"
# Check for properly formatted copyright header in each file
copyright-check = "True"
copyright-author = "Canonical Ltd."
copyright-regexp = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+%(author)s"

[tool.tox]
skipsdist = true
skip_missing_interpreters = true
envlist = ["fmt", "lint", "unit", "integration"]

[vars]
src_path = "{toxinidir}/src/"
tst_path = "{toxinidir}/tests/"

[tool.tox.env_run_base]
passenv = [
	"PYTHONPATH",
	"CHARM_BUILD_DIR",
	"MODEL_SETTINGS",
	"KUBECONFIG",
]
setenv = { PYTHONPATH = "{toxinidir}:{toxinidir}/lib:{[vars]src_path}", PYTHONBREAKPOINT = "ipdb.set_trace", PY_COLORS = "1" }

[tool.tox.env.fmt]
commands = [
	["isort", "{[vars]src_path}", "{[vars]tst_path}"],
	["black", "{[vars]src_path}", "{[vars]tst_path}"],
]
runner = "uv-venv-lock-runner"
extras = ["fmt"]
description = "Apply coding style standards to code"

[tool.tox.env.lint]
commands = [
	# uncomment the following line if this charm owns a lib
	# codespell {[vars]lib_path}
    [
        "codespell",
        "{toxinidir}/.",
        "--skip",
        "{toxinidir}/.git",
        "--skip",
        "{toxinidir}/.tox",
        "--skip",
        "{toxinidir}/build",
        "--skip",
        "{toxinidir}/lib",
        "--skip",
        "{toxinidir}/venv",
        "--skip",
        "{toxinidir}/.mypy_cache",
        "--skip",
        "{toxinidir}/icon.svg",
        "--skip",
        "*.json.tmpl",
    ],
	# pflake8 wrapper supports config from pyproject.toml
	["pflake8", "{[vars]src_path}", "{[vars]tst_path}"],
	["isort", "--check-only", "--diff", "{[vars]src_path}", "{[vars]tst_path}"],
	["black", "--check", "--diff", "{[vars]src_path}", "{[vars]tst_path}"],
]
runner = "uv-venv-lock-runner"
extras = ["lint"]
description = "Check code against coding style standards"

[tool.tox.env.tflint]
allowlist_externals = [
	"tflint"
]
commands = [
	["tflint", "--chdir=terraform", "--recursive"]
]
runner = "uv-venv-lock-runner"
description = "Check Terraform code against coding style standards"

[tool.tox.env.unit]
commands = [
	[
        "coverage",
        "run",
        "--source={[vars]src_path}",
	    "-m",
        "pytest",
        "--ignore={[vars]tst_path}integration",
        "-vv",
        "--tb",
        "native",
        { replace = "posargs", extend = true },
    ],
	["coverage", "report"],
	["coverage", "xml"],
]
runner = "uv-venv-lock-runner"
extras = ["charm", "unit"]
description = "Run unit tests"

[tool.tox.env.integration]
commands = [
    [
        "pytest",
        "-vv",
        "--tb",
        "native",
        "--asyncio-mode=auto",
        "{[vars]tst_path}integration",
        "--log-cli-level=INFO",
        "-s",
        { replace = "posargs", extend = true },
    ],
]
runner = "uv-venv-lock-runner"
extras = ["integration"]
description = "Run integration tests"
